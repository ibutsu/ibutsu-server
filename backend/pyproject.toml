[project]
version = "2.8.2"
name = "ibutsu_server"
description = "A system to store and query test results and artifacts"
authors = [
    {name = "Raoul Snyman"},
    {name = "John Dupuy", email = "jdupuy26@gmail.com"},
]
maintainers = [
    {name = "Mike Shriver", email = "mshriver@redhat.com"},
    {name = "Egor Shamardin", email = "eshamard@redhat.com"},
]
keywords = ["OpenAPI", "Ibutsu"]
requires-python = ">=3.9"



classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Testing",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
  "Operating System :: OS Independent",
]

dependencies = [
    "alembic",
    "celery",
    "connexion[swagger-ui]==2.14.2",
    "flask_bcrypt",
    "flask_cors",
    "flask_mail",
    "Flask>=2,<2.3.0",
    "Flask-SQLAlchemy<3.0",
    "flatdict",
    "google-api-python-client",
    "google-auth",
    "google-auth-httplib2",
    "google-auth-oauthlib",
    "gunicorn",
    "kombu",
    "lxml",
    "psycopg2-binary",
    "pyjwt",
    "pymongo",
    "python-magic",
    "python_dateutil",
    "PyYAML",
    "redis",
    "setuptools",
    "sqlalchemy-json",
    "sqlalchemy==1.4",
    "swagger-ui-bundle",
    "vine",
    "werkzeug",
]

[project.urls]
Source = "https://github.com/ibutsu/ibutsu-server"


[project.optional-dependencies]
test = [
  "hatch",
  "pre-commit",
  "pytest",
  "pytest-xdist",
  "Flask-Testing",
  "coverage",
  "pluggy",
  "py",
  "pytest-mock",
  "randomize",
  "uv",
]


[project.scripts]
ibutsu_server = "ibutsu_server.__main__:main"

[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.hatch.setuptools]
raw-options.include_package_data = true
raw-options.package_data = {"" = ["openapi/openapi.yaml"]}

# move to src layout
# don't package tests, so they can be run without editable install
[tool.hatch.build.targets.wheel]
packages = ["ibutsu_server"]
exclude = [
    "docker/",
    "tests/",
    "**/test/",
    "**/tests/",
    "test_*.py",
    "*_test.py",
    "conftest.py",
]

[tool.hatch.build.targets.sdist]
exclude = [
    "tests/",
    "**/test/",
    "**/tests/",
    "test_*.py",
    "*_test.py",
    "conftest.py",
    "coverage.xml",
    "htmlcov/",
    ".pytest_cache/",
    ".coverage",
    ".coverage.*",
]


[tool.hatch.envs.default]
python = "3.9"
dependencies = [
  "psycopg2-binary",  # Use binary version to avoid compilation issues
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
test-cov = "coverage run -m pytest {args}"
cov-report = "coverage report"
cov-xml = "coverage xml"
cov-html = "coverage html"
cov = [
  "test-cov",
  "cov-xml",
  "cov-report",
]
lint = "pre-commit run --all-files"
lint-check = "pre-commit run --all-files --show-diff-on-failure"

[tool.hatch.envs.test]
dependencies = [
  "psycopg2-binary",  # Use binary version to avoid compilation issues
  "Flask-Testing",
]
extra-dependencies = [
  "coverage[toml]",
  "pytest-xdist",
]

[tool.hatch.envs.test.scripts]
run = "pytest {args}"
run-cov = "coverage run -m pytest {args}"
cov-report = "coverage report"
cov-xml = "coverage xml"
cov-html = "coverage html"
cov = [
  "run-cov",
  "cov-xml",
  "cov-report",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11"]


[tool.ruff]
line-length = 100
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented-out code)
    "PL",   # Pylint
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that might be too strict for existing codebase
# TODO: Remove these once violations are fixed
ignore = [
    "S101",   # Use of assert detected (common in tests)
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "N806",   # Variable in function should be lowercase (for API compatibility)
    "N803",   # Argument name should be lowercase (for API compatibility)
    "T201",   # print found (allow prints in some contexts)
]

# Per-file ignores for Connexion controller functions
[tool.ruff.lint.per-file-ignores]
"**/controllers/**/*.py" = [
    "ARG001",  # Unused function argument (Connexion passes token_info/user automatically)
    "ARG002",  # Unused method argument
]
"**/widgets/**/*.py" = [
    "ARG001",  # Unused function argument (Widget functions must accept all WIDGET_TYPES parameters)
    "ARG002",  # Unused method argument
]
"**/tests/**/*.py" = [
    "S105",   # Possible hardcoded password string
    "S106",   # Possible hardcoded password assigned to argument
    "ARG002", # Unused method argument (common in test mocks)
    "RUF012", # Mutable class attributes should be annotated with ClassVar (not needed in test mocks)
    "PLC0415", # Import should be at the top-level of a file (needed for test fixtures)
]
"**/util/__init__.py" = [
    "PLC0415", # Import should be at the top-level of a file (needed for optional dependencies)
]

# Tool-specific configurations
[tool.ruff.lint.isort]
known-first-party = ["ibutsu_server"]
combine-as-imports = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.pylint]
max-args = 8  # Allow more arguments for API endpoints

[tool.ruff.format]
quote-style = "double"


[tool.coverage.run]
source = ["ibutsu_server"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
# fail_under removed - coverage thresholds managed by codecov.yml

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--tb=short -n 4"
